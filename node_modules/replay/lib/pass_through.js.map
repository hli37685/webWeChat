{"version":3,"sources":["pass_through.js"],"names":["HTTP","require","ClientRequest","module","exports","passThrough","passThroughFunction","arguments","length","hostname","request","truthy","callback","options","protocol","url","port","path","method","headers","agent","auth","http","trailers","addTrailers","on","response","captured","version","httpVersion","statusCode","statusMessage","rawHeaders","body","chunk","encoding","push","rawTrailers","part","write","end"],"mappings":";;AAAA,MAAMA,OAAOC,QAAQ,MAAR,CAAb;;AAGA,MAAMC,gBAAgBF,KAAKE,aAA3B;;AAEAC,OAAOC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,mBAArB,EAA0C;AACzD,MAAIC,UAAUC,MAAV,KAAqB,CAAzB,EACEF,sBAAsB,MAAK,IAA3B,CADF,KAEK,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC;AACxC,UAAMI,WAAWH,mBAAjB;AACAA,0BAAuBI,OAAD,IAAYA,QAAQD,QAAR,KAAqBA,QAAvD;AACD,GAHI,MAGE,IAAI,OAAOH,mBAAP,KAA+B,UAAnC,EAA+C;AACpD,UAAMK,SAAS,CAAC,CAACL,mBAAjB;AACAA,0BAAsB,MAAKK,MAA3B;AACD;;AAED,SAAO,UAASD,OAAT,EAAkBE,QAAlB,EAA4B;AACjC,QAAIN,oBAAoBI,OAApB,CAAJ,EAAkC;AAChC,YAAMG,UAAU;AACdC,kBAAUJ,QAAQK,GAAR,CAAYD,QADR;AAEdL,kBAAUC,QAAQK,GAAR,CAAYN,QAFR;AAGdO,cAAUN,QAAQK,GAAR,CAAYC,IAHR;AAIdC,cAAUP,QAAQK,GAAR,CAAYE,IAJR;AAKdC,gBAAUR,QAAQQ,MALJ;AAMdC,iBAAUT,QAAQS,OANJ;AAOdC,eAAUV,QAAQU,KAPJ;AAQdC,cAAUX,QAAQW;AARJ,OAAhB;;AAWA,YAAMC,OAAO,IAAIpB,aAAJ,CAAkBW,OAAlB,CAAb;AACA,UAAIH,QAAQa,QAAZ,EACED,KAAKE,WAAL,CAAiBd,QAAQa,QAAzB;AACFD,WAAKG,EAAL,CAAQ,OAAR,EAAiBb,QAAjB;AACAU,WAAKG,EAAL,CAAQ,UAAR,EAAoB,UAASC,QAAT,EAAmB;AACrC,cAAMC,WAAW;AACfC,mBAAgBF,SAASG,WADV;AAEfC,sBAAgBJ,SAASI,UAFV;AAGfC,yBAAgBL,SAASK,aAHV;AAIfZ,mBAAgBO,SAASP,OAJV;AAKfa,sBAAgBN,SAASM,UALV;AAMfC,gBAAgB;AAND,SAAjB;AAQAP,iBAASD,EAAT,CAAY,MAAZ,EAAoB,UAASS,KAAT,EAAgBC,QAAhB,EAA0B;AAC5CR,mBAASM,IAAT,CAAcG,IAAd,CAAmB,CAACF,KAAD,EAAQC,QAAR,CAAnB;AACD,SAFD;AAGAT,iBAASD,EAAT,CAAY,KAAZ,EAAmB,YAAW;AAC5BE,mBAASJ,QAAT,GAAwBG,SAASH,QAAjC;AACAI,mBAASU,WAAT,GAAwBX,SAASW,WAAjC;AACAzB,mBAAS,IAAT,EAAee,QAAf;AACD,SAJD;AAKD,OAjBD;;AAmBA,UAAIjB,QAAQuB,IAAZ,EACE,KAAK,IAAIK,IAAT,IAAiB5B,QAAQuB,IAAzB,EACEX,KAAKiB,KAAL,CAAWD,KAAK,CAAL,CAAX,EAAoBA,KAAK,CAAL,CAApB;AACJhB,WAAKkB,GAAL;AACD,KAvCD,MAwCE5B;AACH,GA1CD;AA2CD,CAtDD","file":"pass_through.js","sourcesContent":["const HTTP = require('http');\n\n\nconst ClientRequest = HTTP.ClientRequest;\n\nmodule.exports = function passThrough(passThroughFunction) {\n  if (arguments.length === 0)\n    passThroughFunction = ()=> true;\n  else if (typeof passThrough === 'string') {\n    const hostname = passThroughFunction;\n    passThroughFunction = (request)=> request.hostname === hostname;\n  } else if (typeof passThroughFunction !== 'function') {\n    const truthy = !!passThroughFunction;\n    passThroughFunction = ()=> truthy;\n  }\n\n  return function(request, callback) {\n    if (passThroughFunction(request)) {\n      const options = {\n        protocol: request.url.protocol,\n        hostname: request.url.hostname,\n        port:     request.url.port,\n        path:     request.url.path,\n        method:   request.method,\n        headers:  request.headers,\n        agent:    request.agent,\n        auth:     request.auth\n      };\n\n      const http = new ClientRequest(options);\n      if (request.trailers)\n        http.addTrailers(request.trailers);\n      http.on('error', callback);\n      http.on('response', function(response) {\n        const captured = {\n          version:        response.httpVersion,\n          statusCode:     response.statusCode,\n          statusMessage:  response.statusMessage,\n          headers:        response.headers,\n          rawHeaders:     response.rawHeaders,\n          body:           []\n        };\n        response.on('data', function(chunk, encoding) {\n          captured.body.push([chunk, encoding]);\n        });\n        response.on('end', function() {\n          captured.trailers     = response.trailers;\n          captured.rawTrailers  = response.rawTrailers;\n          callback(null, captured);\n        });\n      });\n\n      if (request.body)\n        for (let part of request.body)\n          http.write(part[0], part[1]);\n      http.end();\n    } else\n      callback();\n  };\n};\n\n"],"sourceRoot":"/source/"}