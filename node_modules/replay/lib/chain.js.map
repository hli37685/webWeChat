{"version":3,"sources":["chain.js"],"names":["module","exports","Chain","constructor","first","last","append","handler","layer","_wrap","next","prepend","clear","start","request","callback","error","response"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEAA,OAAOC,OAAP,GAAiB,MAAMC,KAAN,CAAY;;AAE3BC,gBAAc;AACZ;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,IAAL,GAAa,IAAb;AACD;;AAED;AACAC,SAAOC,OAAP,EAAgB;AACd,UAAMC,QAAQ,KAAKC,KAAL,CAAWF,OAAX,CAAd;AACA,SAAKH,KAAL,GAAc,KAAKA,KAAL,IAAcI,KAA5B;AACA,QAAI,KAAKH,IAAT,EACE,KAAKA,IAAL,CAAUK,IAAV,GAAiBF,KAAjB;AACF,SAAKH,IAAL,GAAcG,KAAd;AACA,WAAO,IAAP;AACD;;AAED;AACAG,UAAQJ,OAAR,EAAiB;AACf,UAAMC,QAAQ,KAAKC,KAAL,CAAWF,OAAX,CAAd;AACAC,UAAME,IAAN,GAAa,KAAKN,KAAlB;AACA,SAAKA,KAAL,GAAaI,KAAb;AACA,SAAKH,IAAL,GAAa,KAAKA,IAAL,IAAaG,KAA1B;AACA,WAAO,IAAP;AACD;;AAED;AACAI,UAAQ;AACN,SAAKR,KAAL,GAAa,KAAKC,IAAL,GAAY,IAAzB;AACD;;AAED;AACA,MAAIQ,KAAJ,GAAY;AACV,WAAO,KAAKT,KAAZ;AACD;;AAGD;AACA;AACA;AACAK,QAAMF,OAAN,EAAe;AACb,aAASC,KAAT,CAAeM,OAAf,EAAwBC,QAAxB,EAAkC;AAChCR,cAAQO,OAAR,EAAiB,UAASE,KAAT,EAAgBC,QAAhB,EAA0B;AACzC,YAAID,SAASC,QAAb,EACEF,SAASC,KAAT,EAAgBC,QAAhB,EADF,KAEK,IAAIT,MAAME,IAAV,EACHF,MAAME,IAAN,CAAWI,OAAX,EAAoBC,QAApB,EADG,KAGHA;AACH,OAPD;AAQD;AACD,WAAOP,KAAP;AACD;;AArD0B,CAA7B","file":"chain.js","sourcesContent":["// Processing chain: pass each request through a list of handlers\n//\n// Each handler called with ClientRequest object and must pass control to\n// callback with either error, ServerResponse object, or no arguments to pass\n// control to the next handler.\n\nmodule.exports = class Chain {\n\n  constructor() {\n    // Linked list of handlers; each handler has a reference to the next one\n    this.first = null;\n    this.last  = null;\n  }\n\n  // Appends a handler to the chain (invoked before all other handlers)\n  append(handler) {\n    const layer = this._wrap(handler);\n    this.first  = this.first || layer;\n    if (this.last)\n      this.last.next = layer;\n    this.last   = layer;\n    return this;\n  }\n\n  // Prepends a handler to the chain (invoked after all other handlers)\n  prepend(handler) {\n    const layer = this._wrap(handler);\n    layer.next = this.first;\n    this.first = layer;\n    this.last  = this.last || layer;\n    return this;\n  }\n\n  // Clears the chain of all its handlers\n  clear() {\n    this.first = this.last = null;\n  }\n\n  // Returns the first handler in the chain\n  get start() {\n    return this.first;\n  }\n\n\n  // Wraps a handler and returns a function that will invoke this handler, and\n  // if the handler does not return a response, pass control to the next handler\n  // in the chain\n  _wrap(handler) {\n    function layer(request, callback) {\n      handler(request, function(error, response) {\n        if (error || response)\n          callback(error, response);\n        else if (layer.next)\n          layer.next(request, callback);\n        else\n          callback();\n      });\n    }\n    return layer;\n  }\n\n};\n\n"],"sourceRoot":"/source/"}