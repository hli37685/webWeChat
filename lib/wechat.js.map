{"version":3,"sources":["../src/wechat.js"],"names":["debug","process","on","console","log","err","Wechat","data","extend","state","CONF","STATE","init","contacts","Contact","Message","lastSyncTime","syncPollingId","syncErrorCount","checkPollingId","retryPollingId","msg","toUserName","sendText","emoticonMd5","sendEmoticon","uploadMedia","file","filename","then","res","ext","sendPic","mediaId","sendVideo","sendDoc","name","size","id","login","syncCheck","selector","SYNCCHECK_SELECTOR_NORMAL","sync","handleSync","Date","now","syncPolling","catch","emit","Error","clearTimeout","setTimeout","restart","Seq","getContact","MemberList","_getContact","concat","_contacts","emptyGroup","filter","contact","UserName","startsWith","MemberCount","length","batchGetContact","updateContacts","ContactList","notifyMobile","checkPolling","checkLogin","code","userAvatar","getUUID","uuid","redirect_uri","_login","_init","stop","response","Promise","resolve","logout","interval","sendMsg","_getPollingMessage","_getPollingTarget","_getPollingInterval","AddMsgCount","handleMsg","AddMsgList","ModContactCount","ModContactList","forEach","FromUserName","MsgType","MSGTYPE_STATUSNOTIFY","userList","StatusNotifyUserName","split","map","all","chunk","list","ToUserName","Content","test","oldContact","i","Object","assign","toLocaleString","func","members","key","member","push","username","nickname","getDisplayName","py","avatar","AvatarUrl","exports","module"],"mappings":"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","file":"wechat.js","sourcesContent":["import WechatCore from './core'\nimport EventEmitter from 'events'\n\nimport _ from 'lodash'\nimport {\n  getCONF,\n  isStandardBrowserEnv\n} from './util'\n\nimport ContactFactory from './interface/contact'\nimport MessageFactory from './interface/message'\n\nimport _debug from 'debug'\nconst debug = _debug('wechat')\n\nif (!isStandardBrowserEnv) {\n  process.on('uncaughtException', err => {\n    console.log('uncaughtException', err)\n  })\n}\n\nclass Wechat extends WechatCore {\n\n  constructor (data) {\n    super(data)\n    _.extend(this, new EventEmitter())\n    this.state = this.CONF.STATE.init\n    this.contacts = {} // 所有联系人\n    this.Contact = ContactFactory(this)\n    this.Message = MessageFactory(this)\n    this.lastSyncTime = 0\n    this.syncPollingId = 0\n    this.syncErrorCount = 0\n    this.checkPollingId = 0\n    this.retryPollingId = 0\n  }\n\n  get friendList () {\n    let members = []\n\n    for (let key in this.contacts) {\n      let member = this.contacts[key]\n      members.push({\n        username: member['UserName'],\n        nickname: this.Contact.getDisplayName(member),\n        py: member['RemarkPYQuanPin'] ? member['RemarkPYQuanPin'] : member['PYQuanPin'],\n        avatar: member.AvatarUrl\n      })\n    }\n\n    return members\n  }\n\n  sendMsg (msg, toUserName) {\n    if (typeof msg !== 'object') {\n      return this.sendText(msg, toUserName)\n    } else if (msg.emoticonMd5) {\n      return this.sendEmoticon(msg.emoticonMd5, toUserName)\n    } else {\n      return this.uploadMedia(msg.file, msg.filename, toUserName)\n        .then(res => {\n          switch (res.ext) {\n            case 'bmp':\n            case 'jpeg':\n            case 'jpg':\n            case 'png':\n              return this.sendPic(res.mediaId, toUserName)\n            case 'gif':\n              return this.sendEmoticon(res.mediaId, toUserName)\n            case 'mp4':\n              return this.sendVideo(res.mediaId, toUserName)\n            default:\n              return this.sendDoc(res.mediaId, res.name, res.size, res.ext, toUserName)\n          }\n        })\n    }\n  }\n\n  syncPolling (id = ++this.syncPollingId) {\n    if (this.state !== this.CONF.STATE.login || this.syncPollingId !== id) {\n      return\n    }\n    this.syncCheck().then(selector => {\n      debug('Sync Check Selector: ', selector)\n      if (+selector !== this.CONF.SYNCCHECK_SELECTOR_NORMAL) {\n        return this.sync().then(data => {\n          this.syncErrorCount = 0\n          this.handleSync(data)\n        })\n      }\n    }).then(() => {\n      this.lastSyncTime = Date.now()\n      this.syncPolling(id)\n    }).catch(err => {\n      if (this.state !== this.CONF.STATE.login) {\n        return\n      }\n      debug(err)\n      this.emit('error', err)\n      if (++this.syncErrorCount > 2) {\n        let err = new Error(`连续${this.syncErrorCount}次同步失败，5s后尝试重启`)\n        debug(err)\n        this.emit('error', err)\n        clearTimeout(this.retryPollingId)\n        setTimeout(() => this.restart(), 5 * 1000)\n      } else {\n        clearTimeout(this.retryPollingId)\n        this.retryPollingId = setTimeout(() => this.syncPolling(id), 2000 * this.syncErrorCount)\n      }\n    })\n  }\n\n  _getContact (Seq = 0) {\n    let contacts = []\n    return this.getContact(Seq)\n    .then(res => {\n      contacts = res.MemberList || []\n      if (res.Seq) {\n        return this._getContact(res.Seq)\n        .then(_contacts => contacts = contacts.concat(_contacts || []))\n      }\n    })\n    .then(() => {\n      if (Seq == 0) {\n        let emptyGroup =\n          contacts.filter(contact => contact.UserName.startsWith('@@') && contact.MemberCount == 0)\n        if (emptyGroup.length != 0) {\n          return this.batchGetContact(emptyGroup)\n          .then(_contacts => contacts = contacts.concat(_contacts || []))\n        } else {\n          return contacts\n        }\n      } else {\n        return contacts\n      }\n    })\n    .catch(err => {\n      this.emit('error', err)\n      return contacts\n    })\n  }\n\n  _init () {\n    return this.init()\n    .then(data => {\n      // this.getContact() 这个接口返回通讯录中的联系人（包括已保存的群聊）\n      // 临时的群聊会话在初始化的接口中可以获取，因此这里也需要更新一遍 contacts\n      // 否则后面可能会拿不到某个临时群聊的信息\n      this.updateContacts(data.ContactList)\n\n      this.notifyMobile()\n      .catch(err => this.emit('error', err))\n      this._getContact()\n      .then(contacts => {\n        debug('getContact count: ', contacts.length)\n        this.updateContacts(contacts)\n      })\n      this.state = this.CONF.STATE.login\n      this.lastSyncTime = Date.now()\n      this.syncPolling()\n      this.checkPolling()\n      this.emit('login')\n    })\n  }\n\n  _login () {\n    const checkLogin = () => {\n      return this.checkLogin()\n        .then(res => {\n          if (res.code === 201 && res.userAvatar) {\n            this.emit('user-avatar', res.userAvatar)\n          }\n          if (res.code !== 200) {\n            debug('checkLogin: ', res.code)\n            return checkLogin()\n          } else {\n            return res\n          }\n        })\n    }\n    return this.getUUID()\n      .then(uuid => {\n        debug('getUUID: ', uuid)\n        this.emit('uuid', uuid)\n        this.state = this.CONF.STATE.uuid\n        return checkLogin()\n      })\n      .then(res => {\n        debug('checkLogin: ', res.redirect_uri)\n        return this.login()\n      })\n  }\n\n  start () {\n    debug('启动中...')\n    return this._login()\n      .then(() => this._init())\n      .catch(err => {\n        debug(err)\n        this.emit('error', err)\n        this.stop()\n      })\n  }\n\n  restart () {\n    debug('重启中...')\n    return this._init()\n      .catch(err => {\n        if (err.response) {\n          throw err\n        } else {\n          let err = new Error('重启时网络错误，60s后进行最后一次重启')\n          debug(err)\n          this.emit('error', err)\n          return new Promise(resolve => {\n            setTimeout(resolve, 60 * 1000)\n          }).then(() => this.init())\n            .then(data => {\n              this.updateContacts(data.ContactList)\n            })\n        }\n      }).catch(err => {\n        debug(err)\n        this.emit('error', err)\n        this.stop()\n      })\n  }\n\n  stop () {\n    debug('登出中...')\n    clearTimeout(this.retryPollingId)\n    clearTimeout(this.checkPollingId)\n    this.logout()\n    this.state = this.CONF.STATE.logout\n    this.emit('logout')\n  }\n\n  checkPolling () {\n    if (this.state !== this.CONF.STATE.login) {\n      return\n    }\n    let interval = Date.now() - this.lastSyncTime\n    if (interval > 1 * 60 * 1000) {\n      let err = new Error(`状态同步超过${interval / 1000}s未响应，5s后尝试重启`)\n      debug(err)\n      this.emit('error', err)\n      clearTimeout(this.checkPollingId)\n      setTimeout(() => this.restart(), 5 * 1000)\n    } else {\n      debug('心跳')\n      this.notifyMobile()\n      .catch(err => {\n        debug(err)\n        this.emit('error', err)\n      })\n      this.sendMsg(this._getPollingMessage(), this._getPollingTarget())\n      .catch(err => {\n        debug(err)\n        this.emit('error', err)\n      })\n      clearTimeout(this.checkPollingId)\n      this.checkPollingId = setTimeout(() => this.checkPolling(), this._getPollingInterval())\n    }\n  }\n\n  handleSync (data) {\n    if (!data) {\n      this.restart()\n      return\n    }\n    if (data.AddMsgCount) {\n      debug('syncPolling messages count: ', data.AddMsgCount)\n      this.handleMsg(data.AddMsgList)\n    }\n    if (data.ModContactCount) {\n      debug('syncPolling ModContactList count: ', data.ModContactCount)\n      this.updateContacts(data.ModContactList)\n    }\n  }\n\n  handleMsg (data) {\n    data.forEach(msg => {\n      Promise.resolve().then(() => {\n        if (!this.contacts[msg.FromUserName] ||\n          (msg.FromUserName.startsWith('@@') && this.contacts[msg.FromUserName].MemberCount == 0)) {\n          return this.batchGetContact([{\n            UserName: msg.FromUserName\n          }]).then(contacts => {\n            this.updateContacts(contacts)\n          }).catch(err => {\n            debug(err)\n            this.emit('error', err)\n          })\n        }\n      }).then(() => {\n        msg = this.Message.extend(msg)\n        this.emit('message', msg)\n        if (msg.MsgType === this.CONF.MSGTYPE_STATUSNOTIFY) {\n          let userList = msg.StatusNotifyUserName.split(',').filter(UserName => !this.contacts[UserName])\n          .map(UserName => {\n            return {\n              UserName: UserName\n            }\n          })\n          Promise.all(_.chunk(userList, 50).map(list => {\n            return this.batchGetContact(list).then(res => {\n              debug('batchGetContact data length: ', res.length)\n              this.updateContacts(res)\n            })\n          })).catch(err => {\n            debug(err)\n            this.emit('error', err)\n          })\n        }\n        if (msg.ToUserName === 'filehelper' && msg.Content === '退出wechat4u' ||\n          /^(.\\udf1a\\u0020\\ud83c.){3}$/.test(msg.Content)) {\n          this.stop()\n        }\n      }).catch(err => {\n        this.emit('error', err)\n        debug(err)\n      })\n    })\n  }\n\n  updateContacts (contacts) {\n    if (!contacts || contacts.length == 0) {\n      return\n    }\n    contacts.forEach(contact => {\n      if (this.contacts[contact.UserName]) {\n        let oldContact = this.contacts[contact.UserName]\n        // 清除无效的字段\n        for (let i in contact) {\n          contact[i] || delete contact[i]\n        }\n        Object.assign(oldContact, contact)\n        this.Contact.extend(oldContact)\n      } else {\n        this.contacts[contact.UserName] = this.Contact.extend(contact)\n      }\n    })\n    this.emit('contacts-updated', contacts)\n  }\n\n  _getPollingMessage () { // Default polling message\n    return '心跳：' + new Date().toLocaleString()\n  }\n\n  _getPollingInterval () { // Default polling interval\n    return 5 * 60 * 1000\n  }\n\n  _getPollingTarget () { // Default polling target user\n    return 'filehelper'\n  }\n\n  setPollingMessageGetter (func) {\n    if (typeof (func) !== 'function') return\n    if (typeof (func()) !== 'string') return\n    this._getPollingMessage = func\n  }\n\n  setPollingIntervalGetter (func) {\n    if (typeof (func) !== 'function') return\n    if (typeof (func()) !== 'number') return\n    this._getPollingInterval = func\n  }\n\n  setPollingTargetGetter (func) {\n    if (typeof (func) !== 'function') return\n    if (typeof (func()) !== 'string') return\n    this._getPollingTarget = func\n  }\n\n}\n\nWechat.STATE = getCONF().STATE\n\nexports = module.exports = Wechat\n"]}